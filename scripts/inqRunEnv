# get the state of the current QA-DKRZ installation

iRE_checkForUpdate()
{
  # 1st run on this day?
  local val
  test ! ${today} && today=$( date '+%Y%m%d' )

  for(( i=0 ; i < ${#name[*]} ; ++i )) ; do
    val=${value[i]}

    if [ ${val:-f} = f -a ${rname[i]} = '+' ] ; then
         iRE_isUp=$(( iRE_isUp + 1 ))
         break
    elif [ ! ${isRO} ] ; then
      if [ "${val:0:2}" = '20' ] ; then
         if . ${QA_SRC}/scripts/parseConfigFile ${name[i]} --inquire \
                && [ ${iRE_isUp:-0} -eq 0 ] ; then
            iRE_isUp=$(( iRE_isUp + 11 ))
            break
         fi
      fi
    fi
  done

  if [ ${isCMIP6} ] ; then
    if [ ${PrePARE:-f} = f -o ${XLSX2CSV:-f} = f  \
                    -o ${UDUNITS2_XML_PATH:-f} = f ] ; then
       iRE_isUp=$(( iRE_isUp + 1 ))
    fi
  fi

  return
}

iRE_checkTables()
{
  local prj=$1

  if [ ! ${QA_HOME} ] ; then
    iRE_isUp=$(( iRE_isUp + 1 ))
    return
  elif [ ! -d ${QA_HOME}/tables/projects/$prj ] ; then
    iRE_isUp=$(( iRE_isUp + 1 ))
    return
  else
    local p=${QA_HOME}/tables/projects

    if [ ${#prj} -eq 0 -a ${#DEFAULT_PROJECT} -gt 0 ] ; then
      prj=${DEFAULT_PROJECT}
    fi

    local reqItems
    declare -a reqItems

    if [ "${prj}" = CORDEX ] ; then
      reqItems=( \
        $p/${prj}/CORDEX_DRS_CV.csv \
        $p/${prj}/CORDEX_GCMModelName.txt \
        $p/${prj}/CORDEX_RCMs_ToU.txt \
        $p/${prj}/CORDEX_variables_requirement_table.csv
      )
    elif [ "${prj}" = CMIP6 ] ; then
      reqItems=( \
        $p/${prj}/CMIP6_check-list.conf \
        $p/${prj}/CMIP6_DRS_CV.csv \
        $p/${prj}/CMIP6_CVs \
        $p/${prj}/cmip6-cmor-tables \
        $p/${prj}/CMIP6_MIP_tables
      )
    fi

    # check always CF
    reqItems=( ${reqItems[*]} \
      $p/CF/CF_check-list.conf \
      $p/CF/CF_area-type-table.txt \
      $p/CF/CF_standardized-region-names.txt \
      $p/CF/cf-standard-name-table.xml \
      )

    local rI
    for rI in ${reqItems[*]} ; do
      if [ ! -e ${rI} ] ; then
        iRE_isUp=$(( iRE_isUp + 1 ))
        break
      fi
    done
  fi

  return
}

iRE_inqState()
{
  local isRO
  if [ "${1}" = '--read-only' ] ; then
    isRO=t
    shift 1
  fi

  local prj
  declare -a prj
  if [ $# -gt 0 ] ; then
    prj=($*)
  fi

  local i name rname reqCount value
  declare -a name rname value
  declare -i reqCount=0

  # First char of names indicate whether optional (-) or required (+)
  # as to must-have names working also in case of a non-update option (default)
  rname=(
         -AUTO_UPDATE \
         -DEFAULT_PROJECT \
         -INTERNET \
         -NEXT_QA_UPDATE \
         +QA_HOME \
         +QA_REVISION \
       )

  # extend for CONDA installation
  if [ ${CONDA_PATH} ] ; then
    rname[${#rname[*]}]=-CONDA_PATH
    rname[${#rname[*]}]=+CONDA_ENV
  fi

  # extend for current projects
  for(( i=0 ; i < ${#prj[*]} ; ++i )) ; do
    rname[${#rname[*]}]=+NEXT_${prj[i]}_UPDATE

    if [ ${prj[i]} = CMIP6 ] ; then
      isCMIP6=t
      rname[${#name[*]}]=+PrePARE
      rname[${#rname[*]}]=+UDUNITS2_XML_PATH
      rname[${#rname[*]}]=+XLSX2CSV
      rname[${#rname[*]}]=+CONDA_CMOR_ENV
    fi
  done

  # count mandatory names and convert to plain requirements and names, respectively
  for(( i=0 ; i < ${#rname[*]} ; ++i )) ; do
    test ${rname[i]:0:1} = '+' && reqCount+=1
    name[i]=${rname[i]:1}
    rname[i]=${rname[i]:0:1}
  done

  # read configuration setting
  iRE_readConfigFile

  iRE_checkForUpdate

  test ${iRE_isUp} -eq 0 && iRE_checkTables $*

  test ${isRO:-f} = t -o ${iRE_isUp} = 0 && return ${iRE_isUp}

  test ${iRE_RestoreApproval} && return ${iRE_isUp}

  if [ ${CONDA_PATH} ] ; then
    # try to restore some lost config-file items
    local iRE_conda_envs
    declare -a iRE_conda_envs

    iRE_conda_envs=( $( ${CONDA_PATH}/bin/conda info --envs | awk '{print $(NF)}') )
  fi

  iRE_scanCondaEnv qa-dkrz

  if [ ${CONDA_CMOR_PATH} ] ; then
    # try to restore some lost config-file items
    local iRE_conda_envs
    declare -a iRE_conda_envs

    iRE_conda_envs=( $( ${CONDA_CMOR_PATH}/bin/conda info --envs | awk '{print $(NF)}') )
  fi

  iRE_scanCondaEnv PrePARE.py
  iRE_scanCondaEnv udunits2.xml

  # revison num of the package
  local packRec
  ${QA_SRC}/scripts/getVersion packRev

  . ${QA_SRC}/scripts/parseConfigFile QA_REVISION${packRev:+=}${packRev}

  iRE_RestoreApproval=t

  iRE_inqState ${iRE_CallParam[*]}

  return
}

iRE_readConfigFile()
{
  local count i
  declare -i count=0

  for(( i=0 ; i < ${#name[*]} ; ++i )) ; do
    if . ${QA_SRC}/scripts/parseConfigFile ${name[i]} --inquire ; then
       value[i]=${!name[i]}

       if [ ${rname[i]} = '+' -a ${#value[i]} -eq 0 ] ; then
          echo "missing feature: ${name[i]}"
       else
          count+=1
       fi
    fi
  done

  return
}

iRE_scanCondaEnv()
{
  local f ix env ix_custom ix_env ix_root
  local path path_env path_custom path_root env_custom env_env env_root
  declare -a path

  if [ $1 = qa-dkrz -o $1 = PrePARE.py ] ; then
    test $1 = qa-dkrz -a ${CONDA_PATH:-f} = f && return  # not installed by conda
#    test ! \( ${isCMIP6:-f} = t -a $1 = PrePARE.py \)  && return

    # priority: custom, env, root
    if [ $1 = qa-dkrz -a ${CONDA_PATH:-f} = f ] ; then
       CONDA_PATH=$(. ${QA_SRC}/scripts/which.sh conda)
    elif [ $1 = PrePARE.py -a  ${CONDA_CMOR_PATH:-f} = f ] ; then
       CONDA_CMOR_PATH=${CONDA_PATH}
    fi

    for(( i=0 ; i < ${#iRE_conda_envs[*]} ; ++i )) ; do
       env=${iRE_conda_envs[i]##*/}   # only for internal envs
       f=${iRE_conda_envs[i]%/*}

       path=( $(find ${iRE_conda_envs[i]} -type f -name "$1") )

       if [ ${#path[*]} -gt 0 ] ; then
         if [ $1 = qa-dkrz -a  \
                "${CONDA_PATH}" = ${iRE_conda_envs[i]} ] ; then
            path_root=${path[0]}
            ix_root=i
         elif [ $1 != qa-dkrz -a \
                "${CONDA_CMOR_PATH}" = ${iRE_conda_envs[i]} ] ; then
            path_root=${path[0]}
            ix_root=i
         elif [ ${f##*/} = envs ] ; then
            # if more than a single one, then the first
            if [ ${#env_env} -eq 0 ] ; then
               path_env=${path[0]}
               ix_env=i
               env_env=${env}
            fi
         else
            # custom
            # if more than a single one, then the first
            if [ ${#custom_env} -eq 0 ] ; then
              path_custom=${path[0]}
              ix_custom=i
              env_custom=${env}
            fi
         fi
       fi
    done

    if [ ${custom_env} ] ; then
       path=${path_custom}
       ix=ix_custom
       env=$env_custom
    elif [ ${env_env} ] ; then
       path=${path_env}
       ix=${ix_env}
       env=${env_env}
    elif [ ${root_env} ] ; then
       path=${path_root}
       ix=${ix_root}
       env=none
    else
      return
    fi

  elif [ ${isCMIP6:-f} = t -a ${#PrePARE} -gt 0 ] ; then
    path=( $( find ${PrePARE%/bin/PrePARE.py} -name "udunits2.xml" ) )
    . ${QA_SRC}/scripts/parseConfigFile UDUNITS2_XML_PATH=${path[0]}
    return
  else
    return
  fi

  if [ $1 = qa-dkrz ] ; then
     CONDA_QA_ENV=${env}
     . ${QA_SRC}/scripts/parseConfigFile CONDA_QA_ENV=${CONDA_QA_ENV}
  elif [ $1 = PrePARE.py ] ; then
     CONDA_CMOR_ENV=${env}
     . ${QA_SRC}/scripts/parseConfigFile CONDA_CMOR_ENV=${CONDA_CMOR_ENV}

     PrePARE=$path
     . ${QA_SRC}/scripts/parseConfigFile PrePARE=${PrePARE}
  fi

  return
}

# main

if [ ${1%%=*} = funct ] ; then
  # run a function
  shift 1

  ${1#funct=} $*
  return $?
fi

iRE_isUp=0

iRE_CallParam=( $* )

iRE_inqState $*

return $?
