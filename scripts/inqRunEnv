# get the state of the current QA-DKRZ installation

iRE_checkForUpdate()
{
  # 1st run on this day?
  local isUp=0 val
  test ! ${today} && today=$( date '+%Y%m%d' )

  for(( i=0 ; i < ${#name[*]} ; ++i )) ; do
    val=${value[i]}

    if [ ${val:-f} = f -a ${rname[i]} = '+' ] ; then
         isUp=1
         break
    elif [ ! ${isRO} ] ; then
      if [ "${val:0:2}" = '20' ] ; then
         if [ ${val} -lt $today -a ${isUp:-0} -eq 0 ] ; then
            isUp=11
            break
         fi
      fi
    fi
  done

  if [ ${isCMIP6} ] ; then
    if [ ${PrePARE:-f} = f -o ${XLSX2CSV:-f} = f  \
                    -o ${UDUNITS2_XML_PATH:-f} = f ] ; then
       isUp=1
    fi
  fi

  return $isUp
}

iRE_checkTables()
{
  local prj=$1

  if [ ! ${QA_HOME} ] ; then
    return 1
  elif [ ! -d ${QA_HOME}/tables/projects/$prj ] ; then
    return 1
  else
    local p=${QA_HOME}/tables/projects

    if [ ${#prj} -eq 0 -a ${#DEFAULT_PROJECT} -gt 0 ] ; then
      prj=${DEFAULT_PROJECT}
    fi

    local reqItems
    declare -a reqItems

    if [ "${prj}" = CORDEX ] ; then
      reqItems=( \
        $p/${prj}/CORDEX_DRS_CV.csv \
        $p/${prj}/CORDEX_GCMModelName.txt \
        $p/${prj}/CORDEX_RCMs_ToU.txt \
        $p/${prj}/CORDEX_variables_requirement_table.csv
      )
    elif [ "${prj}" = CMIP6 ] ; then
      reqItems=( \
        $p/${prj}/CMIP6_check-list.conf \
        $p/${prj}/CMIP6_DRS_CV.csv \
        $p/${prj}/CMIP6_CVs \
        $p/${prj}/cmip6-cmor-tables \
        $p/${prj}/CMIP6_MIP_tables
      )
    fi

    # check always CF
    reqItems=( ${reqItems[*]} \
      $p/CF/CF_check-list.conf \
      $p/CF/CF_area-type-table.txt \
      $p/CF/CF_standardized-region-names.txt \
      $p/CF/cf-standard-name-table.xml \
      )

    local rI
    for rI in ${reqItems[*]} ; do
      test ! -e ${rI} && return 1
    done
  fi

  return 0
}

iRE_inqState()
{
  local isRO
  if [ "${1}" = '--read-only' ] ; then
    isRO=t
    shift 1
  fi

  local prj
  declare -a prj
  if [ $# -gt 0 ] ; then
    prj=($*)
  fi

  local i name rname reqCount value
  declare -a name rname value
  declare -i reqCount=0

  # First char of names indicate whether optional (-) or required (+)
  # as to must-have names working also in case of a non-update option (default)
  rname=(
         -AUTO_UPDATE \
         -DEFAULT_PROJECT \
         -INTERNET \
         -LAST_QA_UPDATE \
         +QA_HOME \
         +QA_REVISION \
       )

  # extend for CONDA installation
  if [ ${CONDA_QA_PATH} ] ; then
    rname[${#rname[*]}]=-CONDA_QA_PATH
    rname[${#rname[*]}]=-LAST_CONDA_QA_UPDATE
    rname[${#rname[*]}]=+CONDA_QA_ENV
  fi

  # extend for current projects
  for(( i=0 ; i < ${#prj[*]} ; ++i )) ; do
    rname[${#rname[*]}]=+LAST_${prj[i]}_UPDATE

    if [ ${prj[i]} = CMIP6 ] ; then
      isCMIP6=t
      rname[${#name[*]}]=+PrePARE
      rname[${#rname[*]}]=+UDUNITS2_XML_PATH
      rname[${#rname[*]}]=+XLSX2CSV
      rname[${#rname[*]}]=+CONDA_CMOR_ENV
    fi
  done

  # count mandatory names and convert to plain requirements and names, respectively
  for(( i=0 ; i < ${#rname[*]} ; ++i )) ; do
    test ${rname[i]:0:1} = '+' && reqCount+=1
    name[i]=${rname[i]:1}
    rname[i]=${rname[i]:0:1}
  done

  # read configuration setting
  iRE_readConfigFile

  local status=0  # no updates

  if iRE_checkForUpdate ; then
    if ! iRE_checkTables $* ; then
       status=1
    fi
  else
    status=1
  fi

  test ${isRO:-f} = t -o ${status} = 0 && return ${status}

  test ${iRE_RestoreApproval} && return ${status}

  # try to restore some lost config-file items
  iRE_scanCondaEnv qa-dkrz
  iRE_scanCondaEnv PrePARE.py
  iRE_scanCondaEnv udunits2.xml

  # revison num of the package
  local packRec
  getRevNum packRev

  . ${QA_SRC}/scripts/parseConfigFile QA_REVISION${packRev:+=}${packRev}

  iRE_RestoreApproval=t

  iRE_inqState ${iRE_CallParam[*]}

  return
}

iRE_readConfigFile()
{
  local count i
  declare -i count=0

  for(( i=0 ; i < ${#name[*]} ; ++i )) ; do
    if . ${QA_SRC}/scripts/parseConfigFile ${name[i]} ; then
       value[i]=${!name[i]}

       if [ ${rname[i]} = '+' -a ${#value[i]} -eq 0 ] ; then
          echo "missing feature: ${name[i]}"
       else
          count+=1
       fi
    fi
  done

  return
}

iRE_scanCondaEnv()
{
  if [ $1 = qa-dkrz ] ; then
    test ! ${CONDA_QA_PATH} && return  # not installed by conda
    test ${CONDA_QA_ENV} && return
  else
    test ! ${isCMIP6} && return

    if [ $1 = PrePARE.py ] ; then
      if [ ! \( ${CONDA_CMOR_ENV:-f} = f -o ${XLSX2CSV:-f} = f \
                   -o ${PrePARE:-f} = f \) ] ; then
        return
      fi
    else
      test ${UDUNITS2_XML_PATH} && return
    fi
  fi

  local x f ff fs
  local path fs
  declare -a fs

  # find installation path
  if [ "$1" = qa-dkrz ] ; then
    fs=( $( find ${CONDA_QA_PATH} -type f -name $1 2> /dev/null ) )
    f=${fs[0]}
  elif [ $1 = PrePARE.py ] ; then
    fs=( $( find ${CONDA_QA_PATH} -type f -name $1 2> /dev/null ) )
    f=${fs[0]}
  else
    fs=( $( find ${PrePARE%/bin/PrePARE.py} -type f -name $1 2> /dev/null ) )
    f=${fs[0]}
  fi

  test ! ${f} && return 0

  # not only for the envs, but also for PrePARE and udunits2 if any
  path=$f

  for x in $* ; do
    while [ "${f##*/}" != envs ] ; do
      test ! ${f} && break
      ff=${f##*/}
      f=${f%/*}
    done

    if [ "${f}" ] ; then
      if [ $x = qa-dkrz ] ; then
        CONDA_QA_ENV=t
      elif [ $x = PrePARE.py ] ; then
        CONDA_CMOR_ENV=t
      fi
    fi

    if [ $x = qa-dkrz ] ; then
      if [ ${CONDA_QA_ENV:-f} = t  ] ; then
        CONDA_QA_ENV=${ff}
      else
        CONDA_QA_ENV=none
      fi

      . ${QA_SRC}/scripts/parseConfigFile CONDA_QA_ENV=${CONDA_QA_ENV}
    elif [ $x = PrePARE.py ] ; then
      if [ ${CONDA_CMOR_ENV:-f} = t  ] ; then
        CONDA_CMOR_ENV=${ff}
      else
        CONDA_CMOR_ENV=none
      fi

      . ${QA_SRC}/scripts/parseConfigFile CONDA_CMOR_ENV=${CONDA_CMOR_ENV}

      PrePARE=$path
      . ${QA_SRC}/scripts/parseConfigFile PrePARE=${PrePARE}

    else
      local i
#      for(( i=0 ; i <  ${#fs[*]} ; ++i )) do
#        test ${fs[i]} != ${fs[i]#*cmor} && break
#      done

#      test $i -lt ${#fs[*]} && \
        . ${QA_SRC}/scripts/parseConfigFile UDUNITS2_XML_PATH=${path}
    fi
  done

  return
}

# main

if [ ${1%%=*} = funct ] ; then
  # run a function
  shift 1

  ${1#funct=} $*
  return $?
fi

iRE_CallParam=( $* )

iRE_inqState $*

return $?
