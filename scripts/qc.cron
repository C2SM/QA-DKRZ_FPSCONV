#! /bin/bash

# Purpose:  I) re-launch qc-DKRZ processes after a system crash.
#          II) start of new tasks provided in a TASK Directory

# Actions for I) take priority of II)
         
# Note: Variable QC_SRC below is derived from $0
#       If you change the location of the qc.cron script
#       from directory QC/scripts to somewhere else, then
#       you have to provide the absolute path to the QC source
#       as additonal argument to your crontab script calling.

# This script checks whether there are more files , i.e. PIDs of
# qc-DKRZ instances are registered in dir QC/PID directory, than
# corresponding jobs are running. If so, this indicates a system
# crash having interrupted all qcManger processes active before the crash.
# Then, information stored in file pid.number are used to restart
# the session(s). Also remnants from the broken sessions are removed,
# i.e. files PID/pid.number are removed as well as all
# temporal ProcPool-ident.number(s) directories.
# A message is written to the continued session log-file.

# Note: the script checks the validity of the QC_SRC path. If it is
# invalid and an email address was provided, the named recipient
# will be notified. If invalid, this script exits without further action.
 
# Examples for crontab entries:

# environment variable
# path=your-absolute-QC-source-path

# every other second minute
#0-59/2 * * * * path/QC/scripts/qc.cron

# at startup of the system
#@reboot path/QC/scripts/qc.cron 

# each day at 23h and 49min
#49 23 * * * path/QC/scripts/qc.cron

if [ $# -eq 1 ] ; then
  QC_SRC=$1
else
  this=$0
  QC_SRC=${this%/scripts/qc.cron}
fi

EMAIL_TO=(heinz-dieter.hollweg@zmaw.de)

getPIDs()
{
  # get PIDs of qc-DKRZ while discarding child processes
 local pid ppid save r
 declare -a pid ppid
 
  # Note: there is alway one more pid, namely for the grep in the pipe.
  #       This is eliminated by 'grep -v grep'
  r=( $( ps -ef | grep qc-DKRZ | grep -v grep | awk '{print $2,$3}' )  )

  # sort pids according to child and parent;
  for(( i=0 ; i < ${#r[*]} ; ++i )) ;  do
    pid[${#pid[*]}]=${r[i++]}
    ppid[${#ppid[*]}]=${r[i]}
  done

  # discard children
  for(( i=0 ; i < ${#pid[*]} ; ++i )) ;  do
    for(( j=0 ; j < ${#ppid[*]} ; ++j )) ;  do
      test ${ppid[j]} = ${pid[i]} && continue 2
    done

    # this is an initial instance
    save=${save}${pid[i]},
  done

  eval ${1}=${save}  # return the pids
}

sendEMail()
{
  test ${#EMAIL_TO[*]} -eq 0 && return

  # activate backslash escaped chars
  sendText="$( echo -e $sendText )"

  mailx -s "$sendSubject"  ${EMAIL_TO[*]} <<!
$sendText
!

  return
}

sess_logMessage()
{
  # print messages to the log file

  # date and host
  local i j k N str0 str tmp z

  str0="\n$( date +'%F %T' ) ${HOSTNAME%%.*}: "

  # The total output is subdivided into chunks of pmax characters.
  # Effect of \n is preserved.
  tmp="$*"
  local pmax=100
  i=0
  str=

  while [ $i -lt ${#tmp} ] ; do
    N=$(( i + pmax ))
    for (( k=i ; k < N ; ++k )) ; do
      if [ "${tmp:k:2}" = "\n" ] ; then
        str="${str}\n\t${tmp:i:$((k-i))}"
        i=$((k+2))
        continue 2
      fi
    done
    str="${str}\n\t${tmp:i:pmax}"
    i=$(( i + pmax ))
  done

  echo -e "${str0}${str}" >> $sessionFile
}

task()
{
  # the script requires the number of currently active runs
  # in order to prevent flooding
  $QC_SRC/scripts/qc_task ${#runs[*]} >> /work/bm0021/hdh/QC_results/.qc_task.log

  exit
}



# -------- main ------

# introduce an off-set between three machines
if [ ${HOSTNAME%.*} = lizard5 ] ; then
  sleep 20
elif [ ${HOSTNAME%.*} = lizard6 ] ; then
  sleep 40
fi

if [ ! -d $QC_SRC ] ; then
  sendSubject="qc.cron: path to QC not found"
  sendText="${QC_SRC}: No such directory"
  sendEMail
  exit
fi

if [ ! -d $QC_SRC/PID ] ; then
  # No active session running.

  #run the task launching script
  $QC_SRC/scripts/qc_task
  exit
fi

# Get files with appended pid of the corresponding qcManger process.
files=( $( ls $QC_SRC/PID/* 2> /dev/null) )

# Get pid(s) of running qc-DKRZ processes; store in runs
declare -a runs
getPIDs runs

#expand the comma-separated list
runs=( ${runs[*]//,/ } )

#############
task
exit
#############


# The number of current runs equals the number of pid-files. ok
# Note: if greater: one or more qc-DKRZ instance is/are either
# going to generate it's pid-file or, more likely, there
# are temporal children.
test ${#runs[*]} -ge ${#files[*]} && task

# Perhaps a running process had just deleted it's pid-file, but is
# still alive and was/is going to finish immediately.
# Try again after a short nap
sleep 5
test ${#runs[*]} -ge ${#files[*]} && task

# this is only printed once
message="restart by qc.cron"

# Apparently, a system crash has happened and there are remaining
# qc-DKRZ instances to be re-launched.
for f in ${files[*]} ; do
  # Get pid from file
  fp=${f##*.}

  # No idea how this might happen. But, test for pid-files with
  # corresponding running process.
  for run in ${runs[*]} ; do
     test ${run} -eq ${fp} && continue 2
  done 

  # clear ProcPool remnants
  fs=( $( ls -d $QC_SRC/ProcPool*.$fp 2> /dev/null ) )
  for(( i=0 ; i < ${#fs[*]} ; ++i )) ; do
    \rm -r -f ${fs[i]}
  done

  # Read the file. 1st line: path where the original process was
  # launched. 2nd line: the args for a re-launch. 3rd line:
  # path and name of session logfile
  while read arg ; do
    cd $arg  # the directory where a process was launched

    read -a args          # the command-line arguments
    read sessionFile      # path/name of session logfile
    
    # Add option -q, if not present    
    # Add option -s arg, if not present
    for a in ${args[*]} ; do
      test "$a" = '-q' && is_q=f
      test "$a" = '-s' && is_s=f
    done

    test ${is_q:-t} = t && args=( ${args[*]} -q )
    test ${is_s:-t} = t && args=( ${args[*]} -s $sessionFile )

    # Add option -q if not present    
    # Add option -s if not present

    # Re-launch. Any output to a console is discarded
    # because a cron job would not know where to direct.
    $QC_SRC/scripts/qc-DKRZ ${args[*]} &> /dev/null &
#    $QC_SRC/scripts/qc-DKRZ ${args[*]} -E_DEBUG_M &> /scratch/local1/k204145/hdh/QC/example/asdf &

    #collect messages
    message="${message}\nstarted: $QC_SRC/scripts/qc-DKRZ ${args[*]}\nremoved: $f"

    break # loop was just used to keep the file open
  done < $f

  # clear the pid-file that survived a system crash.
  \rm -f $f
 
done

# write message to the session log
sess_logMessage "${message}"
