#! /bin/bash

cmip6()
{
   local currPWD=$(pwd)
   if [ ! -d $QA_SRC/scripts/xlsx2csv ] ; then
      cd $QA_SRC/scripts
      git clone http://github.com/dilshod/xlsx2csv &> cmip6_tables.log

      if [ $? -gt 0 ] ; then
        errMessage="git failed for xlsx2csv"
        return
      fi
      
      ln xlsx2csv/xlsx2csv.py
   fi

   test ! -d ~/.qa-dkrz/tables/projects/CMIP6  \
      && mkdir -p ~/.qa-dkrz/tables/projects/CMIP6

   cd ~/.qa-dkrz/tables/projects/CMIP6
   wget -l1 -N -np  \
      http://proj.badc.rl.ac.uk/svn/exarch/CMIP6dreq/tags/latest/dreqPy/docs/CMIP6_MIP_tables.xlsx \
      &>> cmip6_tables.log

   if [ $? -gt 0 ] ; then
      errMessage="wget CMIP6_MIP_tables.xlsx from http://proj.badc.rl.ac.uk"
      return
   fi

      # location of extracted csv table sheets: ~/.qa-dkrz/tables/projects/CMIP6
   $QA_SRC/scripts/xlsx2csv.py -a -d '|' -l '\n' CMIP6_MIP_tables.xlsx CMIP6_MIP_tables

   # the CMIP6 json files
   
   if [ -d CMIP6_CVs ] ; then
     cd CMIP6_CVs

     if [ "$(getGitBranch)" != master ] ; then
       git checkout master &> /dev/null
     fi

     git fetch && git reset --hard origin/master &> /dev/null
   else
     git clone https://github.com/WCRP-CMIP/CMIP6_CVs
   fi

   if [ $? -gt 0 ] ; then
      errMessage="git failed for CMIP6_CVs from https://github.com/WCRP-CMIP"
   fi

   return
}

cordex()
{
   local status
   
   if [ -d IS-ENES-Data.github.io ] ; then
     cd IS-ENES-Data.github.io

     if [ "$(getGitBranch)" != master ] ; then
       git checkout master &> /dev/null
     fi

     git fetch && git reset --hard origin/master &> /dev/null
     status=$?
   else
     git clone https://github.com/IS-ENES-Data/IS-ENES-Data.github.io
     status=$?

     ln -sf IS-ENES-Data.github.io/CORDEX_RCMs_ToU.txt CORDEX_RCMs_ToU.txt
   fi

   if [ $status -gt 0 ] ; then
     errMessage="git failed for IS-ENES-Data.github.io"
   fi
       
   return
}

getGitBranch()
{
   git branch | grep '*' | awk '{print $2}'
   return
}

# main
while getopts hP:-: option ${sArgs[*]}
do
  case $option in
    h)  ;;
    P)  prj=${OPTARG} ;;
    -) if [ ${OPTARG%=*} = "config_file" ] ; then
         CONFIG_FILE=${OPTARG##*=}
       elif [ ${OPTARG} == 'debug' ] ; then
         set -x
       elif [ ${OPTARG} == 'force-update' ] ; then
         isForceUp=t
       elif [ ${OPTARG%=*} = "qa_path" ] ; then
         QA_SRC=${OPTARG##*=}
       fi
       ;;
   \?) exit 1 ;;
  esac
done

shift $(( $OPTIND - 1 ))

test $# -eq 1  && cd $1 &> /dev/null

test ! "$prj" && prj=${1##*/}

# search for updates only once a day
today=$( date '+%Y%m%d' )

if [ ${isForceUp:-f} = f ] ; then
  if ! . $QA_SRC/scripts/updateConfigFile.txt ${prj}_LAST_UPDATE=$today  ; then
    exit
  fi
fi

if [ "$prj" = CORDEX ] ; then
  cordex
elif [ "$prj" = CMIP6 ] ; then
  cmip6
fi

if [ "${errMessage}" ] ; then
   echo "could not ${errMessage}" 
   exit 1
fi
      
