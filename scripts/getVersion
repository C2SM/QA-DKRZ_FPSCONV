#! /bin/bash

descript()
{
  echo " -h, --help"
  echo " -v            Verbose on multiple lines"
  echo " --debug"
  echo " --get-branch  Get the current git branch"
  echo " --qa-tables   Path to the tables"
  echo " --verbose     Verbose on multiple lines"
  echo " string        Currrent project"
  exit 0
}

getGitBranch()
{
   #git -C $1 branch | grep '*' | awk '{print $2}'
   cd $1 &> /dev/null

   # produces output
   branch=$( git branch | grep '*' | awk '{print $2}' )

   currIdent=$(git log --pretty=format:'%h' -n 1)

   cd - &> /dev/null

   return
}

getFromConda()
{
   if tmp=( $(cat ${QA_SRC}/install.log 2> /dev/null) ) ; then
     branch=${tmp[0]#*=}
     currIdent=${tmp[1]#*=}
     test ${#tmp[*]} -gt 2 && tag=${tmp[2]#*=}
   fi

   return
}

getQA_Version()
{

  # get current revision number; this determines whether it is
  # before a change of defaults happened.

  # this is always brief
  . ${QA_SRC}/scripts/parseConfigFile QA_REVISION=delete

  if [ ! -d $QA_SRC/.git ] ; then
    getFromConda

    QA_REVISION="${tag}${branch:+,}${branch}-${currIdent}"
    . ${QA_SRC}/scripts/parseConfigFile QA_CONDA_REVISION=${QA_REVISION}
  else
    local branch currIdent
    local f=${QA_SRC}/conda-recipes/qa-dkrz/meta.yaml

    getGitBranch $QA_SRC

    tag=$( grep 'name:' $f | awk '{print $(NF)}' )
    tmp2=$( grep 'version:' $f | awk '{print $(NF)}' )
    tmp2=${tmp2:1}
    tag=${tag}-${tmp2:0:$((${#tmp2}-1))}
    tmp2=$( grep 'number:' $f | awk '{print $(NF)}' )
    tag=${tag}-${tmp2}

    QA_REVISION="${tag}${branch:+,}${branch}-${currIdent}"
    . ${QA_SRC}/scripts/parseConfigFile QA_GitHub_REVISION=${QA_REVISION}
  fi


  if [ ${isVerbose} ] ; then
    vStr="QA version:"
    vStr="${vStr}\n   branch: ${branch}"
    vStr="${vStr}\n   commit-SHA: ${currIdent}"
    vStr="${vStr}\n   tag: ${tag:- -}"
  else
   vStr="${QA_REVISION}"
  fi

  return
}

getExternalVersion()
{
  local prjs
  declare -a prjs

  test ${prj} != CF && prjs[0]=CF
  prjs[${#prjs[*]}]=${prj}

  if [ ${isVerbose} ] ; then
    sep0='\n'
    sep1='\n   '
  else
    sep0='|'
  fi

  local pprj=${QA_TABLES}/tables/projects
  local branch currIdent

  for prj in ${prjs[*]} ; do
    if [ ${prj} = CMIP6 ] ; then
       getGitBranch $pprj/CMIP6/CMIP6_CVs

       #git -C ${QA_TABLES}/CMIP6/CMIP6_CVs log --oneline --decorate\
       vStr="${vStr}${sep0}CMIP6_CVs:${sep1}"
       vStr="${vStr}${branch}-${currIdent}"

		 vStr="${vStr}${sep0}CMIP6_MIP_tables.xlsx:${sep1}"
		 vStr="${vStr}"$(ls -l --time-style='+%FT%T' \
		           $pprj/CMIP6/CMIP6_MIP_tables.xlsx \
		           | awk '{print $6}')

		 if [ ! ${PrePARE} ] ; then
	      if ! Prepare=${QA_SRC}/scripts/which_cmd_alias -q PrePARE ; then
	 	      . ${QA_SRC}/scripts/parseConfigFile PrePARE
			fi
		 fi

		if [ ${PrePARE} ] ; then

			i=$(ls ${PrePARE%/bin/PrePARE}/conda-meta/cmor-* 2> /dev/null)
			i=${i##*/}
		   vStr="${vStr}${sep0}CMOR:${sep1}${i%.json}"

         getGitBranch $pprj/CMIP6/cmip6-cmor-tables
         #git -C ${QA_TABLES}/CMIP6/CMIP6_CVs log --oneline --decorate\
         vStr="${vStr}${sep0}cmip6-cmor-tables:${sep1}${branch}-${currIdent}"
		fi
    elif [ ${prj} = CORDEX ] ; then
       local branch=$(getGitBranch $QA_SRC)
       cd $pprj/CORDEX/IS-ENES-Data.github.io &>  /dev/null
       #currIdent=$(git -C ${QA_SRC} log --pretty=format:'%h' -n 1)
       local currIdent=$(git log --pretty=format:'%h' -n 1)

       vStr="${vStr}${sep0}CORDEX/IS-ENES-Data.github.io:${sep1}"
       vStr="${vStr}${branch}-${currIdent}"
       cd - &> /dev/null
    elif [ ${prj} = CF ] ; then
       if [ ${CF_STD_NAME_VERSION} ] ; then
         vStr="${vStr}${sep0}CF_STD_NAME_VERSION:${sep1}"
         vStr="${vStr}${CF_STD_NAME_VERSION}"
       elif [ -f $pprj/CF/standard-names.html ] ; then
         local vd
         vd="$(grep 'Standard Name Table (.*)' $pprj/CF/standard-names.html)"
         vd="${vd#*(}"
         vd="${vd%)*}"
         vd="${vd// /}"
         vStr="${vStr}${sep0}CF_STD_NAME_VERSION:${sep1}"
         vStr="${vStr}${vd}"
       fi
    fi
  done

  return
}

getSrcPath()
{
   local p
   p=$0

   if [ ! -h ${p%/getVersion} ] ; then
     if [ ${p:0:1} = '/' ] ; then
       QA_SRC=${0%/getVersion}
       QA_SRC=${QA_SRC%/scripts}
     fi
   fi

   local i items p
   declare -a items

   while [ -h $p ] ; do
      # resolve symbolic links: cumbersome but robust,
      items=( $(ls -l $p) )
      i=$((${#items[*]}-1))
      p=${items[i]}
   done

   # only the directory
   p=${p%/*}

   # resolve relative path
   if [ ${p:0:1} != '/' ] ; then
     cd $p &> /dev/null
     p=$(pwd)
     cd - &> /dev/null
   fi

   QA_SRC=$p
   test ${QA_SRC##*/} = scripts && QA_SRC=${QA_SRC%/scripts}

   return
}


# --- main ---

getSrcPath

while getopts h:v-: option
do
  case $option in
    h)  descript ;;
    v)  isVerbose=t ;;
    -) if [ ${OPTARG%=*} == 'config-file' ] ; then
         CONFIG_FILE=${OPTARG#*=}
       elif [ ${OPTARG} = "debug" ] ; then
         set -x
       elif [ ${OPTARG} == 'get-branch' ] ; then
         getGitBranch ${QA_SRC}
         echo $branch
         exit 0
       elif [ ${OPTARG} == 'help' ] ; then
         descript
       elif [ ${OPTARG%=*} == 'qa-tables' -o ${OPTARG%=*} == 'qa-home' ] ; then
         QA_TABLES=${OPTARG#*=}
       elif [ ${OPTARG} == 'verbose' ] ; then
         isVerbose=t
       fi
       ;;
   \?) echo "getVersion: undefined option $option"
       exit 41 ;;
  esac
done

shift $(( $OPTIND - 1 ))

test $# -gt 0 && prj=$1

getQA_Version
test ${prj} && getExternalVersion

# print
if [ ${isVerbose} ] ; then
  echo -e "${vStr}"
else
  echo -n "${vStr}"
fi

exit 0
