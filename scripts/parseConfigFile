# embedded function, i.e. has to be included by source or '.'

# note that such an embedded functionality replaces positional parameters
# by those which are passed. If none are passed, then the positional parameters
# of the calling instance are used.

# return 0 for a match between provided parameter=value and config file
#          or an enabled one.
# return 1 for a new/updated parameter, a mismatch, disable, a set variable, or not defined.

readCF()
{
   # adjust for spaces a user may have edited into the section

   # because of embedded code, uCF_lines stay vivid once set.

   local sz

   # arrays cannot be exported, but a single line may be.
   # this work-around prevents repeatedly reading of the config file
   if [ "${uCF_line_0}" ] ; then
     local i
     sz=$(( ${uCF_blkEnd:-0} - ${uCF_blkBeg:-0} ))

     for(( i=0 ; i < sz ; ++i )) ; do
       eval uCF_lines[${i}]="\${uCF_line_${i}}"

#       if [ "${#uCF_lines[i]}" -eq 0 ] ; then
#         unset uCF_lines[i]
#         break
#       fi
     done

     return 0
   fi

   test ${uCF_blkBeg} && return 0

   uCF_blkBeg=0
   sz=0 # number in the file, not in the block
   local uCF_is=f

   while read line ; do
       test "${uCF_is}" = t -a ! "${line}" && break

       sz=$((sz + 1))

       if [ "${line}" = ${QA_SRC}: ] ; then
           uCF_is=t
           uCF_blkBeg=$sz
           continue
       fi

       if [ ${uCF_is} = t ] ; then
           line=${line// /}

           while [ ${line/==/=} != ${line} ] ; do
               line=${line/==/=}
           done

           uCF_lines[${#uCF_lines[*]}]="${line}"
       fi

   done < ${CONFIG_FILE}

   test ${sz} -gt 0 && uCF_blkEnd=${sz}

   # append a new section and a particular default for auto-update
   if [ ${uCF_blkBeg} -eq 0 ] ; then
       echo -e "\n${QA_SRC}:"                >> $CONFIG_FILE

#      echo AUTO_UPDATE=enabled              >> $CONFIG_FILE
#      uCF_lines[${#uCF_lines[*]}]="AUTO_UPDATE=enabled"

#      echo DEFAULT_PROJECT=$defaultProject  >> $CONFIG_FILE
#      uCF_lines[${#uCF_lines[*]}]=DEFAULT_PROJECT="${defaultProject}"

       local n=2
       if [ ${CONDA_QA_PATH} ] ; then
         local today=$( date '+%Y%m%d' )
         echo LAST_CONDA_QA_UPDATE=${today} >> $CONFIG_FILE
         uCF_lines[${#uCF_lines[*]}]=LAST_CONDA_QA_UPDATE="${today}"
         n=$((n+1))
       fi

      uCF_blkBeg=$((sz+n))
      uCF_blkEnd=$uCF_blkBeg
   fi

   # export array as single lines
   local i
   for(( i=0 ; i < ${#uCF_lines[*]} ; ++i )) ; do
      export uCF_line_${i}="${uCF_lines[i]}"
   done

   export uCF_blkBeg
   export uCF_blkEnd

   return 0
}

show_lines()
{
  local i retVal
  for(( i=0 ; i < ${#uCF_lines[*]} ; ++i )) ; do
       echo ${uCF_lines[i]}
  done

  return
}

updateConfFile()
{
   # check items
   local param=$1
   local param_name=${param%=*}
   local param_value=${param#*=}

   if [ "${param_value}" = disable -o "${param_value}" = f ] ; then
       param=${param_name}=disable
       param_value=disable
   elif [ "${param_value}" = t ] ; then
       param=${param_name}=enable
       param_value=enable
   elif [ "${param_value}" = ${param_name} ] ; then
       param_value=
   fi

   local i retVal
   for(( i=0 ; i < ${#uCF_lines[*]} ; ++i )) ; do
       if [ ${uCF_lines[i]%=*} = ${param_name} ] ; then

         if [ "${param}" = "${param_name}" ] ; then
           # request
           if [ "${uCF_lines[i]#*=}" = disable ] ; then
             eval ${param_name}=f
             retVal=1
           elif [ "${uCF_lines[i]#*=}" = enable ] ; then
             eval ${param_name}=t
             retVal=0
           else
             # read value from the config file and set variable
             eval ${uCF_lines[i]}
             retVal=0
           fi
         elif [ ${uCF_lines[i]} = ${param} ] ; then
           # comparison
           if [ ${param_value} = disable ] ; then
             # disable
             eval ${param_name}=f
             retVal=1
           elif [ ${param_value} = enable ] ; then
             # enable or unchanged (matched).
             eval ${param_name}=t
             retVal=0
           else
             # match
             retVal=0
           fi
         elif [ "${param_value}" ] ; then
           lineNum=$((uCF_blkBeg+i+1))
           sed -i "${lineNum} c${param}" $CONFIG_FILE &> /dev/null
           uCF_lines[i]="${param_name}=${param_value}"
           retVal=1
         fi

         return $retVal
       fi
   done

   # not defined
   test ! "${param_value}" && return 1

   # new
   sed -i "${uCF_blkEnd} a${param}" $CONFIG_FILE &> /dev/null

   local sz=${#uCF_lines[*]}

   uCF_lines[sz]="${param}"
   export uCF_line_${i}="${uCF_lines[sz]}"

   uCF_blkEnd=$(( uCF_blkEnd + 1 ))

   return 1
}


# main
if [ "$1" = '--force_reading' ] ; then
  shift

  unset uCF_line_0
  unset uCF_lines
  unset uCF_blkBeg
fi

#if [ "$1" = --show_lines ] ; then
#  show_lines
#  return
#fi

if [ ! -f ${CONFIG_FILE}  ] ; then
  mkdir -p ${CONFIG_FILE%/*}
  touch ${CONFIG_FILE}
fi

test ${#uCF_lines[*]} -eq 0 && readCF

updateConfFile $*

return $?
