#! /bin/bash

getSrcPath()
{
  # extract the path to the root of the QA package

  # is it in a conda built?
  local x_conda=${0%/qa-dkrz}
  if [ ${x_conda##*/} = bin ] ; then
    x_conda=${x_conda%/bin}
    if [ -d $x_conda/opt/qa-dkrz ] ; then
       CONDA_ENV=t
       export QA_PATH=$x_conda/opt/qa-dkrz
       return
    fi
  fi

  local target isInvalid

  if [ ${1:0:1} = '/' ] ; then
    target=$1
  else
    target=$(pwd)/$1
  fi

  if [ -h $target ] ; then

    # get the link
    local link=$(ls -l $target | awk  '{print $(NF)}')

    # link is relative, so make it absolute
    test ${link:0:1} != '/' && link=${target%/*}/${link}

    getSrcPath ${link}

  elif [ -f $target ] ; then

    # a real instance, at first resolve .. and .
    # works also for . or .. in the middle of the path

    local xname=${target##*/}
    target=${target%/*}  # remove the name of the script

    local arr=( ${target//\// } )

    local i j sz
    sz=${#arr[*]}

    for(( i=1 ; i < sz ; ++i )) ; do

      if [ "${arr[i]}" = '.' ] ; then
        unset arr[i]
      elif [ "${arr[i]}" = '..' ] ; then
        j=$((i-1))

        # this takes into account adjacent . and/or .. with any depth
        while [ ${#arr[j]} -eq 0 ] ; do
          j=$((j-1))
        done
        unset arr[j]
        unset arr[i]
      fi
    done

    # get rid of empty items
    arr=( ${arr[*]} )

    sz=${#arr[*]}

    local tmp
    for(( i=0 ; i < sz ; ++i )) ; do
      tmp=${tmp}/${arr[i]}

      if [ -f ${tmp}/.install_configure ] ; then
        QA_PATH=$tmp
        break
      fi
    done

    test $i -eq $sz && isInvalid=t
  else
    isInvalid=t
  fi

  if [ ${isInvalid:-f} = t ] ; then

    local str=$(ls -l $target 2> /dev/null | awk  '{print $(NF)}')

    if [ ${#str} -gt 0 ] ; then
      str="invalid path=$0"
    else
      str="broken path=$0"
    fi

    echo "${str}"

    exit 1
  fi

  export QA_PATH=${QA_PATH}

  return
}

run()
{
  # $1: Fail | Pass
  # $2: chapX[/...]

  if [ $# -ne 2 ] ; then
    echo 'function run() failed'
    exit
  fi

  cd $2

  local ncDir=${initPWD}/Nc/$1/$2

  # clear nc-files in Txt which will not be re-processed
  \rm  *.nc 2> /dev/null

   # clear all Nc files, but write-protected ones
  if [ -d ${ncDir}  ] ; then
    for f in ${ncDir}/*.nc ; do
       test -w $f && \rm $f
    done
  fi

  fs=( $( ls *.txt 2> /dev/null) )

  if [ ${#fs[*]} -gt 0 ] ; then
    test ! -d ${ncDir} && mkdir -p ${ncDir}

    for f in ${fs[*]} ; do
      test $f = Readme.txt && continue

      echo "$d/$2 $f"
      ${initPWD}/scripts/mkNc $f
    done

    for f in *.nc ; do
       # preserve write-protected files
      test -f $ncDir/${f##*/} && test ! -w $ncDir/${f##*/} && continue

      mv $f $ncDir
    done
  fi

  cd - &> /dev/null

  return
}


#### main ##

if [ -d "$1" ] ; then
  QA_PATH=$1
else
  getSrcPath $0
fi

cd $QA_PATH/CF-TestSuite

# make all nc-files of the CF Test Suite
initPWD=$(pwd)

for d in Pass Fail ; do

  cd ${initPWD}/Txt/$d

  chap=( $( ls -d chap* ) )

  for c in ${chap[*]} ; do

    cd ${initPWD}/Txt/$d
    oPwd=$(pwd)

    # descend into dir tree starting at chapX
    dirs=( $( find $c -type d ) )

    for dir in ${dirs[*]} ; do
      test -d ${dir} && run $d ${dir}
    done

  done

done
